name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Auto-format with black
      run: |
        black nui_lambda_shared_utils tests
        if ! git diff --quiet; then
          echo "::warning::Code was auto-formatted by Black"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Auto-format code with Black [skip ci]" || echo "No changes to commit"
        else
          echo "✅ Code is already properly formatted"
        fi
    
    - name: Type check with mypy
      run: |
        mypy nui_lambda_shared_utils --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors yet
    
    - name: Test with pytest
      run: |
        pytest --cov=nui_lambda_shared_utils --cov-report=xml --cov-report=term-missing -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package integrity
      run: |
        twine check dist/*
        echo "Package contents:"
        python -m tarfile -l dist/*.tar.gz | head -20
        echo "Wheel contents:"
        python -m zipfile -l dist/*.whl | head -20
    
    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import nui_lambda_shared_utils; print('✅ Package imports successfully')"
        python -c "from nui_lambda_shared_utils import Config, get_secret; print('✅ Core imports work')"